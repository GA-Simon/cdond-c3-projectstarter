
  # install_dependencies:
  #   description: Install Ansible and awscli
  #   steps:
  #     - run:
  #         name:
  #         command: |
  #           sudo apt update
  #           sudo apt install software-properties-common -y
  #           sudo add-apt-repository --yes --update ppa:ansible/ansible
  #           sudo apt install ansible -y
  #           sudo apt install awscli -y



      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible
      # - run:
      #     name: Install_awscli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible
      # - run:
      #     name: Install_awscli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible
      # - run:
      #     name: Install_awscli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible
      # - run:
      #     name: Install_awscli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible
      # - run:
      #     name: Install_awscli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible
      # - run:
      #     name: Install_awscli
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      # - run:
      #     name: install_ansible 
      #     command: |
      #       python3 -m pip install --user ansible




  # configure-infrastructure:
  #   docker:
  #     - image: python:3.8-alpine3.15
  #   steps:
  #     - checkout
#     docker:
#           - image: cimg/python:3.10
#             name: Install dependencies
#             command: |
#             sudo apt install -y tar gzip curl            
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: install Ansible 
#           command: |
#             python3 -m pip install --user ansible  
#   #         name: Install dependencies
#   #         command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#   #           apk add --update --no-cache tar gzip curl nodejs npm aws-cli  
#           name: install Ansible 
#       - image: cimg/python:3.10
#             python3 -m pip install --user ansible  
#   #         command: |
#   #           ls -al
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#             sudo ./aws/install
#   #           cd .circleci/ansible
#           name: install Ansible 
#       - image: cimg/python:3.10
#             python3 -m pip install --user ansible  
#   #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#             sudo ./aws/install
# #     
#           name: install Ansible 
#       - image: cimg/python:3.10
#             python3 -m pip install --user ansible  
#   # python3 \
#   # py3-pip \
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#             sudo ./aws/install
#   # && pip3 install --upgrade pip \
#           name: install Ansible 
#       - image: cimg/python:3.10
#             python3 -m pip install --user ansible  


#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#             sudo ./aws/install
#   configure-infrastructure:
#           name: install Ansible 
#       - image: cimg/python:3.10
#             python3 -m pip install --user ansible  
#       - add_ssh_keys:
#           fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#             sudo ./aws/install
#       - run:
#           name: install Ansible 
#           command: |
#             python3 -m pip install --user ansible  
#       - add_ssh_keys:
#           fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
#       - run:
#           name: Configure EC2-instance server
#           command: |
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -vvv configure-server.yml -i inventory.txt        
# # rolls back; should migration fail
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    


#     #
#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
          
#       - run:
#           name: Send migration status to kvdb.io
#           command: |   
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#                 curl https://kvdb.io/MogVSiXw2CcXM5E6mtu5fJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
# #rolls back; should migration fail
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
#       - revert-migrations           
       
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations_dumb.txt            
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dumb.txt
            then
                curl https://kvdb.io/DqZVv2PAwyBRsc3N93494u/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:   
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-frontend:
  #   docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
# copy frontend build to S3 bucket
  
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl nodejs npm aws-cli      
      - restore_cache:
          keys: [frontend-build]
      # - attach_workspace:
      #     at: ~/    
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            ls -al
            npm run build
            ls -al
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#           npm install
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: install dependencies
  #         command: |
  #           yum update -y
  #           yum install -y tar gzip
  #           amazon-linux-extras install -y epel            
  #           yum install -y npm  


#unarchive backend server build to EC2 instance with ansible                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip curl nodejs npm aws-cli ansible                        
      - attach_workspace:
          at: ~/      
      - restore_cache:
          keys: [backend-build]    
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm run build
            cd ..         
            tar -C backend -czvf artifact.tar.gz .
            # mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            # mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------$(cat inventory.txt)"
            ls -l ~/project/
            ansible-playbook -i inventory.txt deploy-backend.yml
#           npm install
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-backend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum update -y
  #           yum install -y  tar gzip
  #           amazon-linux-extras install -y epel
  #           yum install -y ansible
  #           yum install -y npm    


#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#           $(cat inventory.txt)
#           mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
#           mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
#             # your code here
#       # Here's where you will add some code to rollback on failure  


#   deploy-frontend:
#     docker:
#       - image: cimg/python:3.10
#     # docker:
#     #   - image: python:3.7-alpine3.16
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - restore_cache:
#           keys: [frontend-build]  
#       # - run:
#       #     name: Install dependencies
#       #     command: |
#       #       apk add --update --no-cache tar gzip curl nodejs npm aws-cli      
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - run:
#           name: Get backend url
#           command: |
#             BACKEND_PUBLIC_IP=$( aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --filters "Name=tag:project,Values=udapeople" \
#             --output text)
#             export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
#             echo "API_URL = ${API_URL}"
#             echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
#             # cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             ls -al
#             cd ..
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#             ls -al
# #           npm install
# # rolls back; should migration fail
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
#       - revert-migrations:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

#             # npm install
#             # npm run build
#             # npm audit fix
#             # npm audit fix 

#   deploy-backend:
#     docker:
#       - image: cimg/python:3.10  
#     # docker:
#     #   - image: python:3.7-alpine3.16
#     steps:
#       - checkout
#       - install_ansible
#       - install_awscli
#       - install_nodejs
#       - restore_cache:
#           keys: [backend-build] 
#       - add_ssh_keys:
#           fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
#       - attach_workspace:
#           at: ~/   
#       # - run:
#       #     name: Install dependencies
#       #     command: |
#       #       apk add --update --no-cache tar gzip curl nodejs npm aws-cli ansible               
#       - run:
#           name: Package for backend
#           command: |
#             cd backend
#             npm install
#             npm run build
#             tar -C backend -czvf artifact.tar.gz .
#             # mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
#             # mv artifact.tar.gz .circleci/ansible/roles/deploy/files
#       - run:
#           name: Deploy backend
#           command: |            
#             export TYPEORM_MIGRATIONS_DIR=./migrations
#             export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
#             export TYPEORM_MIGRATIONS=./migrations/*.ts
#             cd ..
#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------$(cat inventory.txt)"
#             ls -l ~/project/
#             ansible-playbook -i inventory.txt deploy-backend.yml
# #           npm install
# # rolls back; should migration fail
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
#       - revert-migrations:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            
#             # npm install
#             # npm run build 
#             # npm audit fix --force  
#             # npm audit fix    
#             # npm audit fix 
  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
    # docker:
    #   - image: python:3.7-alpine3.16 
    # steps:
    #   - checkout
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         apk add --update --no-cache curl aws-cli
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url and run backend smoke test
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=udapeople --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl ${URL} | grep "Welcome"
            then
                return 0
            else
                return 1
            fi
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}        


            # export BACKEND_IP=$( aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --filters "Name=tag:project,Values=udapeople" --output text)

# tar gzip nodejs npm
# --connect-timeout 5 -s
      # - attach_workspace:
      #     at: ~/ 
#            export BACKEND_IP=$(tail ~/project/.circleci/ansible/inventory.txt)
          #  curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get all stack workflow id and remove old stack files
          command: |
            CURRENT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo current workflow id: $CURRENT_WORKFLOW_ID
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            mystacks=($STACKS)
            echo ${#mystacks[@]} items in stack :
            echo $mystacks
            for work_id in ${mystacks[@]}
            do
            if [ ${work_id: -7} != $CURRENT_WORKFLOW_ID ]
            then
                aws s3 rm "s3://udapeople-${work_id: -7}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${work_id: -7}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${work_id: -7}"
                echo $work_id removed from stack
            else
              echo No old stack to remove
            fi
            done

  configure-node-exporter:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y  tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            amazon-linux-extras install -y epel
            yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure node_exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook  node-exporter-config.yml -i inventory.txt

  deploy-prometheus-server:
    docker:
      - image: amazon/aws-cli
    environment:

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
      - run:
          name: Install dependencies
          command: |
            yum update -y
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
            yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Spin up EC2 server for prometheus
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
              --tags project=prometheus \
              --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Append IP to inventory file
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt prometheus-alertmanager-config.yml  
          

      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
      # -notify:
      #   context: slack-secrets
      - build-frontend
      #     # context:
      #     #   - slack
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
            #   - slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
        # - configure-node-exporter:
        #     requires: [smoke-test]
        # - deploy-prometheus-server:
        #     requires: [configure-node-exporter]








#==============================================================================
#config.yml file

version: 2.1

commands:
  install_ansible:
    description: Install Ansible and awscli
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
#  sudo apt-get update
#  sudo apt install ansible -y
#  sudo apt install awscli -y

#     python3 -m pip install --user ansible
  install_awscli:
    description: Install AWS CLIv2
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js # 16.9.0
    steps:
      - run:
          name: Install Node.js # 16.9.0
          command: |
            # Install Node.js 16.9.0 version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs

# Install_Ansible:
#   description: Install Ansible v2
#   step:
#     - run:
#         name: Install Ansible v2
#         command: |
#           sudo apt update
#           sudo apt install software-properties-common
#           sudo apt-add-apt-repository --yes --update ppa:ansible/ansible
#           sudo apt install ansible

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo Destroying environment <<parameters.workflow_id>>
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string   
        default: ${CIRCLE_WORKFLOW_ID:0:7}          
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/DqZVv2PAwyBRsc3N93494u/migration_${CIRCLE_WORKFLOW_ID:0:7})            
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi

orbs: 
  slack: circleci/slack@4.12.1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0  # Executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      # - slack/notify:
      #     event: fail
      #       template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #       template: success_tagged_deploy_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      # - slack/notify:
      #     event: fail
      #       template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #       template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Run Unit Test on frontend code
          command: |
            cd frontend
            npm install
            npm run test                
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Run Unit Test on backend code
          command: |
            cd backend
            npm install
            npm run test          
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend packages for security vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical                        
  

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend packages for security vulnerabilities
          command: |
            cd backend
            npm install  
            npm audit fix --audit-level=critical --force  
            npm audit fix --audit-level=critical --force
            npm audit fix --force          
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: install AWS CLI-v2 & other dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: install Ansible 
          command: |
            python3 -m pip install --user ansible
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
      # - image: python:3.9.16
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
      # - run:
      #     name: Install dependencies
      #     command: |
      #         apt-get update
      #         apt install ansible -y
      #         apt install awscli -y 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure EC2-instance server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt        
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      - image: cimg/node:18.4.0
    steps:
      - checkout
      - install_awscli
      - install_nodejs
    # docker:
    #   - image: circleci/node:13.8.0
    # steps:
    #   - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip -qq awscliv2.zip
      #       sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations >> migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/DqZVv2PAwyBRsc3N93494u/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:   
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

# npm audit fix --audit-level=critical --force              
# npm audit --audit-level=critical
# npm audit fix
# npm run build
#           cat migrations_dump.txt   
# npm cache clean --force
# rm -rf node_modules
# rm package-lock.json 

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    # docker:
      # - image: python:3.7-alpine3.16
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update --no-cache tar gzip curl nodejs npm aws-cli  
      - restore_cache:
          keys: [frontend-build] 
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install           
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  deploy-backend:
    docker:
      - image: cimg/python:3.10  
    # docker:
    #   - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]      
      - install_ansible
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk add --update --no-cache tar gzip curl nodejs npm aws-cli ansible     
      - attach_workspace:
          at: ~/   
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Package for backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            ls -al
# mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
# cp artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |            
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    # docker:
  
    docker:
      - image: cimg/node:18.4.0
        # docker:
        # - image: python:3.7-alpine3.16 
        # - image: cimg/base:stable
    steps:
      - checkout
    #   - run:
    #       name: Install dependencies (For python:3.x-alpine3.xx images)
    #       command: |
    #         apk add --update --no-cache curl aws-cli
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: ~/ 
      - run:
          name: Get backend url and run backend smoke test
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=udapeople --output text)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030"
            if curl --connect-timeout 60 "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl ${URL} | grep "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}        


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y npm nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldworkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name*=\'workflowID\'].Value" \
            --no-paginate --output text)
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get all stack workflow id and remove old stack files
          command: |
            CURRENT_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo current workflow id: $CURRENT_WORKFLOW_ID
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            mystacks=($STACKS)
            echo ${#mystacks[@]} items in stack :
            echo $mystacks
            for work_id in ${mystacks[@]}
            do
            if [ ${work_id: -7} != $CURRENT_WORKFLOW_ID ]
            then
                aws s3 rm "s3://udapeople-${work_id: -7}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${work_id: -7}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${work_id: -7}"
                echo $work_id removed from stack
            else
              echo No old stack to remove
            fi
            done

  configure-node-exporter:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y  tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
            amazon-linux-extras install -y epel
            yum install -y ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure node_exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook  node-exporter-config.yml -i inventory.txt

  # deploy-prometheus-server:
  #   docker:
  #     - image: amazon/aws-cli
  #   environment:

  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["75:11:74:14:43:18:dc:4d:78:35:20:a3:54:bc:2a:ca"]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum update -y
  #     - configure-infrastructure:
  #     #       # context:
  #     #       #   - slack
  #         requires: [deploy-infrastructure]
  #           # yum install -y ansible
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Spin up EC2 server for prometheus
  #     - configure-infrastructure:
  #     #       # context:
  #     #       #   - slack
  #         requires: [deploy-infrastructure]
  #             --tags project=prometheus \
  #             --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
  #     - run:
  #         name: Append IP to inventory file
  #     - configure-infrastructure:
  #     #       # context:
  #     #       #   - slack
  #         requires: [deploy-infrastructure]
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt prometheus-alertmanager-config.yml  
          


workflows:
  default:
  # send-notification:
    jobs:
      # -notify:
      #   context: slack-secrets
      # - build-frontend
      #     # context:
      #     #   - slack
      # - build-backend
      #     # context:
      #     #   - slack
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
            # context:
            #   - slack
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
          # requires: [run-migrations]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
        # - configure-node-exporter:
        #     requires: [smoke-test]
        # - deploy-prometheus-server:
        #     requires: [configure-node-exporter]

#====================================================================
#configure-server.yml

---

- name: "configuration play." 
  hosts: web
  user: ubuntu
  become: true
  become_method: sudo
  become_user: root  
  gather_facts: false
  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_host_key_checking: false
    - ansible_stdout_callback: yaml

  pre_tasks:
    - name: "wait 600 seconds for target connection to become reachable/usable."
      wait_for_connection:
        timeout: 600
  
    - name: Update apt-get repo and cache
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    - name: "upgrade packages"
      apt: upgrade=dist force_apt_get=yes

    - name: "install python for Ansible"  
      become: true
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3)
      changed_when: false

  # Get the environment variables from CircleCI and add to the EC2 instance
  environment:
    - TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"  
    - TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
    - TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
    - TYPEORM_PORT: 5432
    - TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
    - TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
    - TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
    - TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
    - TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"

  roles:
    - configure-server
  # - configure-prometheus-node-exporter

#==============================================================================
#configure-server-task-main.yml

---

- name: update and upgrade packages  # sudo apt upgrade
  become: true
  apt:
    upgrade: yes
    update_cache: yes
    # cache_valid_time: 86400

- name: "Install Node.js 13" # sudo apt install Node.js v13
  become: true
  apt:
    name: ["nodejs","npm"]
    state: latest
    update_cache: yes

- name: install pm2  # sudo npm install pm2 -g
  become: true
  npm:
    name: pm2
    global: yes
    state: latest
    production: yes

# - name: "move environment variables to /etc/profile.d/"
#   become: true
#   copy:
#     src: files/myenv.sh
#     dest: ~/etc/profile.d/

# - name: "nodesource installation"
#   shell: curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -

# - name: "Node.js 13.x.x installation"
#   become: true
#   shell: |
#     curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
# #  sudo apt-get install -y nodejs

# - name: Install Python3
  # apt:
  #   name: python3
  #   state: latest
  #   update_cache: yes

# - name: "Node.js 16.x.x installation"
#   become: true
#   shell: |
#     curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
#     sudo apt-get install -y nodejs 


# - name: "install nodejs"
#   apt:
#     update_cache: yes
#     name: nodejs
#     state: latest

# - name: "install pm2"
#   npm:
#     name: pm2
#     global: yes

# - name: update and upgrade packages  # sudo apt upgrade
#   become: true
#   apt:
#     upgrade: yes
#     update_cache: yes
#     cache_valid_time: 86400

# - name: remove dependences that are not needed  # sudo apt autoremove
#   become: yes
#   apt:
#     autoremove: yes

#
#==============================================================================
#deploy-backend.yml

---

- name: "configuration play." 
  hosts: web
  user: ubuntu
  gather_facts: false
  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - ansible_host_key_checking: false
    - ansible_stdout_callback: yaml


  # Get the environment variables from CircleCI and add to the EC2 instance
  environment:
    - TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"  
    - TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
    - TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
    - TYPEORM_PORT: 5432
    - TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
    - TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
    - TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
    - TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
    - TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"

  roles:
    - deploy
#==============================================================================
#deploy-backend-task-main.yml

---

- name: Extract artifact.tar.gz into EC2 server 
  ansible.builtin.unarchive:
    src: ~/project/artifact.tar.gz 
    dest: ~/
  
# - name: npm install all
#   command: npm install

- name: start server with pm2
  command: 
    npm install
    pm2 stop default
    pm2 start npm -- start

- name: delay process by 60 seconds
  ansible.builtin.pause:
    minutes: 1

# - name: update and upgrade packages  # sudo apt upgrade
#   become: yes
#   apt:
#     upgrade: yes
#     update_cache: yes
#     cache_valid_time: 86400

# - name: remove dependences that are not needed  # sudo apt autoremove
#   become: yes
#   apt:
#     autoremove: yes

# # # - name: install dependences  # sudo apt install nodejs npm
# # #   become: true
# # #   apt:
# # #     name: ['nodejs', 'npm'] 
# # #     state: latest
# # #     update_cache: yes

# - name: install dependences  # sudo apt install npm and nodejs
#   shell: |
#     sudo apt install npm -y
#     sudo apt install nodejs -y

# - name: install pm2
#   become: true
#   npm:
#     name: pm2
#     global: yes
#     state: latest
#     production: yes

# - name: "Executing Node app with PM2"
#   shell: |
#     cd ~/backend-app/dist
#     pm2 stop default
#     pm2 delete all
#     pm2 start main.js

# - name: start server with pm2
#   become: true
#   shell: |
#     pm2 stop default
#     pm2 start npm -- start
#     pm2 start main.js
# =====================================================
# - name: extract artifact
#   become: yes
#   unarchive:
#     src: ~/project/artifact.tar.gz 
#     dest: ~/

# - name: extract artifact
#   become: true
#   unarchive:
#     src: files/artifact.tar.gz 
#     dest: .

# - name: "Creates backend app directory"
#   file:
#     path: ~/backend-app
#     state: directory

# - name: "Unarchive backend files"
#   unarchive:
#     src: artifact.tar.gz
#     desc: !/backend-app
# ======================================================
# - name: "Installing dependencies"
#   shell: |
#     cd ~/backend-app
#     npm i

# =====================================================
# - name: Extract artifact.tar.gz into EC2 server 
#   ansible.builtin.unarchive:
#     src: ~/project/artifact.tar.gz 
#     dest: ~/
      # src: files/artifact.tar.gz
    # dest: .

# - name: npm install all
#   command: npm install

# - name: start server with pm2
#   command: pm2 start npm -- start

# - name: delay process by 60 seconds
#   ansible.builtin.pause:
#     minutes: 1
...
#==============================================================================