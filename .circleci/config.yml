version: 2.1

commands:
  install_dependencies:
    description: Install Ansible and awscli
    steps:
      - run:
          name:
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            sudo apt install awscli -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo Destroying environment <<parameters.workflow_id>>
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/MogVSiXw2CcXM5E6mtu5fJ/migration_${CIRCLE_WORKFLOW_ID:0:7})            
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

orbs: 
  slack: circleci/slack@4.12.1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      # - slack/notify:
      #     event: fail
      #       template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #       template: success_tagged_deploy_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      # - slack/notify:
      #     event: fail
      #       template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #       template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Unit Test on frontend code
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run Unit Test on backend code
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend packages for security vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical         

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend packages for security vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add backend ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
  #     # - run:
  #     #     name: Install dependencies
  #     #     command: |
  #     #       apk add --update ansible --no-cache tar gzip ansible awscli

  #     #       apk add --update ansible
  #     #       apk add --update  tar gzip
  #     #       apk add --update curl
  #     #       apk add --no-cache \
  #     #       python3 \
  #     #       py3-pip \
  #     #       && pip3 install --upgrade pip \
  #     #       && pip3 install --no-cache-dir \
  #     #       awscli \
  #     #       && rm -rf /var/cache/apk/*

  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Configure EC2-instance server
  #         command: |
  #           cat .circleci/ansible/inventory.txt
  #           ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt 
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]

      - install_dependencies
      - run:
          name: Configure EC2-instance server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml 
      - attach_workspace:
          at: ~/
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
            
#       - run:
#           name: Send migration status to kvdb.io
#           command: |   
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#                 curl https://kvdb.io/MogVSiXw2CcXM5E6mtu5fJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
# #rolls back; should migration fail
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
#       - revert-migrations           
       
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migrations_dumb.txt            
      - run:
          name: Send migration status to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dumb.txt
            then
                curl https://kvdb.io/DqZVv2PAwyBRsc3N93494u/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
# rolls back; should migration fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations    

  deploy-frontend:
    docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      

#copy frontend build to S3 bucket
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo yum update -y
            sudo yum install -y tar gzip
            sudo yum install -y nodejs
            sudo yum install -y npm
            
      # - attach_workspace:
      #     at: ~/    
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            npm run build
            ls -al
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations
    
#unarchive backend server build to EC2 instance with ansible                    
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]

      - run:
          name: Install dependencies
          command: |
            sudo yum update -y
            sudo yum install -y  tar gzip
          # curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            sudo yum install -y nodejs
          # amazon-linux-extras install -y epel
          # yum install -y ansible 
            sudo amazon-linux-extras install ansible2 -y           
      - attach_workspace:
          at: ~/      
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..         
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ls -l ~/project/
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations 


#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
  # send-notification:
    jobs:
      # -notify:
      #   context: slack-secrets
      # - build-frontend
      #     # context:
      #     #   - slack
      # - build-backend
      #     # context:
      #     #   - slack
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #       # context:
      #       #   - slack
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      # #       # context:
      # #       #   - slack
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]