version: 2.1

commands:
    install_ansible:
      description: Install Ansible and awscli
      steps:
        - run:
            name: Install Ansible
            command: |
              python3 -m pip install --user ansible

    install_awscli:
      description: Install AWS CLIv2
      steps:
        - run:
            name: Install_awscli
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo Destroying environment <<parameters.workflow_id>>
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/DqZVv2PAwyBRsc3N93494u/migration_${CIRCLE_WORKFLOW_ID:0:7})            
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi

orbs: 
  slack: circleci/slack@4.12.1
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0  # Executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ..
            ls -al
            cd project
            cd frontend
            ls -al
            npm install
            npm run build
            ls -al
      # - slack/notify:
      #     event: fail
      #       template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #       template: success_tagged_deploy_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ..
            ls -al
            cd project
            cd backend
            ls -al
            npm install
            npm run build
            ls -al
      # - slack/notify:
      #     event: fail
      #       template: basic_fail_1
      # - slack/notify:
      #     event: pass
      #       template: success_tagged_deploy_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Run Unit Test on frontend code
          command: |
            cd frontend
            npm install
            npm run test                
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - run:
          name: Run Unit Test on backend code
          command: |
            cd backend
            npm install
            npm run test          
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend packages for security vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force  
            npm audit fix --audit-level=critical --force              
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend packages for security vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force  
            npm audit fix --audit-level=critical --force  
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: install AWS CLI-v2 & other dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: install Ansible 
          command: |
            python3 -m pip install --user ansible

      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["d4:64:2b:23:8c:d9:0c:72:4e:7f:f7:1b:fa:81:6b:3e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install tar gzip -y
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            amazon-linux-extras install -y epel
            yum install ansible -y
      # - attach_workspace:
      #     at: ~/  
      - run:
          name: Configure EC2-instance server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvv configure-server.yml -i inventory.txt        
# rolls back; should migration fail
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    



workflows:
  default:
  # send-notification:
    jobs:
      # -notify:
      #   context: slack-secrets
      - build-frontend
      #     # context:
      #     #   - slack
      - build-backend
      #     # context:
      #     #   - slack
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
            # context:
            #   - slack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
      #       # context:
      #       #   - slack
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
        # - configure-node-exporter:
        #     requires: [smoke-test]
        # - deploy-prometheus-server:
        #     requires: [configure-node-exporter]
